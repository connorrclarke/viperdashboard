/*                                                        
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vhscs3.viperdashboard;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Clarke_876632
 */
public class MainWindow extends javax.swing.JFrame {

    private TreeMap<Integer, Case> cases;
    private TreeMap<String, Schedule> schedules;   
    private TreeSet<Integer> matches;
    private File currentFile;
    private DataFactory dataFactory;
    private final JTextField[] scheduleFields;
    private final JTextField[] caseFields;
    private final JComboBox[] departmentBoxes;
    private final JComboBox[] subjectBoxes;
    private final JComboBox[] courseBoxes;
    
    public MainWindow() {
        
        initComponents();
        
        //set default properties for program start up
        menuItem_save.setEnabled(false);
        button_scheduleOK.setVisible(false);
        button_scheduleCancel.setVisible(false);
        panel_comboBoxes.setVisible(false);
        
        cases       = new TreeMap<>();
        schedules   = new TreeMap<>();
        dataFactory = new DataFactory();
        
        scheduleFields = new JTextField[9];
        scheduleFields[0] = textField_scheduleP1;
        scheduleFields[1] = textField_scheduleP2;
        scheduleFields[2] = textField_scheduleP3;
        scheduleFields[3] = textField_scheduleP4;
        scheduleFields[4] = textField_scheduleP5;
        scheduleFields[5] = textField_scheduleP6;
        scheduleFields[6] = textField_scheduleP7;
        scheduleFields[7] = textField_scheduleP8;
        scheduleFields[8] = textField_scheduleP9;
        
        caseFields = new JTextField[9];
        caseFields[0] = textField_caseP1;
        caseFields[1] = textField_caseP2;
        caseFields[2] = textField_caseP3;
        caseFields[3] = textField_caseP4;
        caseFields[4] = textField_caseP5;
        caseFields[5] = textField_caseP6;
        caseFields[6] = textField_caseP7;
        caseFields[7] = textField_caseP8;
        caseFields[8] = textField_caseP9;
        
        departmentBoxes = new JComboBox[9];
        departmentBoxes[0] = comboBox_departmentP1;
        departmentBoxes[1] = comboBox_departmentP2;
        departmentBoxes[2] = comboBox_departmentP3;
        departmentBoxes[3] = comboBox_departmentP4;
        departmentBoxes[4] = comboBox_departmentP5;
        departmentBoxes[5] = comboBox_departmentP6;
        departmentBoxes[6] = comboBox_departmentP7;
        departmentBoxes[7] = comboBox_departmentP8;
        departmentBoxes[8] = comboBox_departmentP9;
        
        subjectBoxes = new JComboBox[9];
        subjectBoxes[0] = comboBox_subjectP1;
        subjectBoxes[1] = comboBox_subjectP2;
        subjectBoxes[2] = comboBox_subjectP3;
        subjectBoxes[3] = comboBox_subjectP4;
        subjectBoxes[4] = comboBox_subjectP5;
        subjectBoxes[5] = comboBox_subjectP6;
        subjectBoxes[6] = comboBox_subjectP7;
        subjectBoxes[7] = comboBox_subjectP8;
        subjectBoxes[8] = comboBox_subjectP9;
        
        courseBoxes = new JComboBox[9];
        courseBoxes[0] = comboBox_courseP1;
        courseBoxes[1] = comboBox_courseP2;
        courseBoxes[2] = comboBox_courseP3;
        courseBoxes[3] = comboBox_courseP4;
        courseBoxes[4] = comboBox_courseP5;
        courseBoxes[5] = comboBox_courseP6;
        courseBoxes[6] = comboBox_courseP7;
        courseBoxes[7] = comboBox_courseP8;
        courseBoxes[8] = comboBox_courseP9;
        
        /*
        //Used to test program functionality with sample data==================
        
        loadSampleData();
        
        buildCasesTable();
        buildSchedulesComboBox();
        //======================================================================
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panel_dashboard = new javax.swing.JPanel();
        panel_barGraphCBG = new com.vhscs3.viperdashboard.GraphicsPanelCBG();
        button_fillCBG = new javax.swing.JButton();
        panel_barGraphCBM = new com.vhscs3.viperdashboard.GraphicsPanelCBM();
        button_fillCBM = new javax.swing.JButton();
        panel_pieGraph = new com.vhscs3.viperdashboard.GraphicsPanelPie();
        comboBox_graphPickerPie = new javax.swing.JComboBox<>();
        panel_cases = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        table_cases = new javax.swing.JTable();
        panel_exposure = new javax.swing.JPanel();
        comboBox_schedules = new javax.swing.JComboBox<>();
        button_scheduleAdd = new javax.swing.JButton();
        button_scheduleEdit = new javax.swing.JButton();
        button_scheduleDelete = new javax.swing.JButton();
        panel_scheduleFields = new javax.swing.JPanel();
        label_scheduleId = new javax.swing.JLabel();
        textField_scheduleId = new javax.swing.JTextField();
        label_scheduleP1 = new javax.swing.JLabel();
        textField_scheduleP1 = new javax.swing.JTextField();
        label_scheduleP2 = new javax.swing.JLabel();
        textField_scheduleP2 = new javax.swing.JTextField();
        label_scheduleP3 = new javax.swing.JLabel();
        textField_scheduleP3 = new javax.swing.JTextField();
        label_scheduleP4 = new javax.swing.JLabel();
        textField_scheduleP4 = new javax.swing.JTextField();
        label_scheduleP5 = new javax.swing.JLabel();
        textField_scheduleP5 = new javax.swing.JTextField();
        label_scheduleP6 = new javax.swing.JLabel();
        textField_scheduleP6 = new javax.swing.JTextField();
        label_scheduleP7 = new javax.swing.JLabel();
        textField_scheduleP7 = new javax.swing.JTextField();
        label_scheduleP8 = new javax.swing.JLabel();
        textField_scheduleP8 = new javax.swing.JTextField();
        label_scheduleP9 = new javax.swing.JLabel();
        textField_scheduleP9 = new javax.swing.JTextField();
        panel_casesFields = new javax.swing.JPanel();
        label_caseNum = new javax.swing.JLabel();
        label_caseP1 = new javax.swing.JLabel();
        textField_caseP1 = new javax.swing.JTextField();
        label_caseP2 = new javax.swing.JLabel();
        textField_caseP2 = new javax.swing.JTextField();
        label_caseP3 = new javax.swing.JLabel();
        textField_caseP3 = new javax.swing.JTextField();
        label_caseP4 = new javax.swing.JLabel();
        textField_caseP4 = new javax.swing.JTextField();
        label_caseP5 = new javax.swing.JLabel();
        textField_caseP5 = new javax.swing.JTextField();
        label_caseP6 = new javax.swing.JLabel();
        textField_caseP6 = new javax.swing.JTextField();
        label_caseP7 = new javax.swing.JLabel();
        textField_caseP7 = new javax.swing.JTextField();
        label_caseP8 = new javax.swing.JLabel();
        textField_caseP8 = new javax.swing.JTextField();
        label_caseP9 = new javax.swing.JLabel();
        textField_caseP9 = new javax.swing.JTextField();
        label_caseDescription = new javax.swing.JLabel();
        comboBox_matches = new javax.swing.JComboBox<>();
        button_scheduleOK = new javax.swing.JButton();
        button_scheduleCancel = new javax.swing.JButton();
        panel_matchesFields = new javax.swing.JPanel();
        label_casesFound = new javax.swing.JLabel();
        textField_matchesP1 = new javax.swing.JTextField();
        textField_matchesP2 = new javax.swing.JTextField();
        textField_matchesP3 = new javax.swing.JTextField();
        textField_matchesP4 = new javax.swing.JTextField();
        textField_matchesP5 = new javax.swing.JTextField();
        textField_matchesP6 = new javax.swing.JTextField();
        textField_matchesP7 = new javax.swing.JTextField();
        textField_matchesP8 = new javax.swing.JTextField();
        textField_matchesP9 = new javax.swing.JTextField();
        panel_comboBoxes = new javax.swing.JPanel();
        comboBox_departmentP7 = new javax.swing.JComboBox<>();
        comboBox_subjectP7 = new javax.swing.JComboBox<>();
        comboBox_courseP7 = new javax.swing.JComboBox<>();
        comboBox_departmentP8 = new javax.swing.JComboBox<>();
        comboBox_subjectP8 = new javax.swing.JComboBox<>();
        comboBox_courseP8 = new javax.swing.JComboBox<>();
        comboBox_departmentP9 = new javax.swing.JComboBox<>();
        comboBox_subjectP9 = new javax.swing.JComboBox<>();
        comboBox_courseP9 = new javax.swing.JComboBox<>();
        comboBox_departmentP6 = new javax.swing.JComboBox<>();
        comboBox_subjectP6 = new javax.swing.JComboBox<>();
        comboBox_courseP6 = new javax.swing.JComboBox<>();
        comboBox_departmentP5 = new javax.swing.JComboBox<>();
        comboBox_subjectP5 = new javax.swing.JComboBox<>();
        comboBox_courseP5 = new javax.swing.JComboBox<>();
        comboBox_subjectP4 = new javax.swing.JComboBox<>();
        comboBox_departmentP4 = new javax.swing.JComboBox<>();
        comboBox_courseP4 = new javax.swing.JComboBox<>();
        comboBox_departmentP3 = new javax.swing.JComboBox<>();
        comboBox_subjectP3 = new javax.swing.JComboBox<>();
        comboBox_courseP3 = new javax.swing.JComboBox<>();
        comboBox_departmentP2 = new javax.swing.JComboBox<>();
        comboBox_courseP2 = new javax.swing.JComboBox<>();
        comboBox_departmentP1 = new javax.swing.JComboBox<>();
        comboBox_subjectP1 = new javax.swing.JComboBox<>();
        comboBox_courseP1 = new javax.swing.JComboBox<>();
        label_subject = new javax.swing.JLabel();
        label_course = new javax.swing.JLabel();
        label_section = new javax.swing.JLabel();
        comboBox_subjectP2 = new javax.swing.JComboBox<>();
        panel_overview = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_open = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        menuItem_close = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_barGraphCBG.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 1, true));

        button_fillCBG.setText("Fill Bar Graph");
        button_fillCBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_fillCBGActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_barGraphCBGLayout = new javax.swing.GroupLayout(panel_barGraphCBG);
        panel_barGraphCBG.setLayout(panel_barGraphCBGLayout);
        panel_barGraphCBGLayout.setHorizontalGroup(
            panel_barGraphCBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_barGraphCBGLayout.createSequentialGroup()
                .addContainerGap(393, Short.MAX_VALUE)
                .addComponent(button_fillCBG)
                .addContainerGap())
        );
        panel_barGraphCBGLayout.setVerticalGroup(
            panel_barGraphCBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_barGraphCBGLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_fillCBG)
                .addContainerGap(757, Short.MAX_VALUE))
        );

        panel_barGraphCBM.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 1, true));

        button_fillCBM.setText("Fill Bar Graph");
        button_fillCBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_fillCBMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_barGraphCBMLayout = new javax.swing.GroupLayout(panel_barGraphCBM);
        panel_barGraphCBM.setLayout(panel_barGraphCBMLayout);
        panel_barGraphCBMLayout.setHorizontalGroup(
            panel_barGraphCBMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_barGraphCBMLayout.createSequentialGroup()
                .addContainerGap(415, Short.MAX_VALUE)
                .addComponent(button_fillCBM)
                .addContainerGap())
        );
        panel_barGraphCBMLayout.setVerticalGroup(
            panel_barGraphCBMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_barGraphCBMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_fillCBM)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_pieGraph.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 1, true));

        comboBox_graphPickerPie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Graph", "by Grade", "by Month" }));
        comboBox_graphPickerPie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_graphPickerPieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_pieGraphLayout = new javax.swing.GroupLayout(panel_pieGraph);
        panel_pieGraph.setLayout(panel_pieGraphLayout);
        panel_pieGraphLayout.setHorizontalGroup(
            panel_pieGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_pieGraphLayout.createSequentialGroup()
                .addContainerGap(386, Short.MAX_VALUE)
                .addComponent(comboBox_graphPickerPie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel_pieGraphLayout.setVerticalGroup(
            panel_pieGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_pieGraphLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBox_graphPickerPie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_dashboardLayout = new javax.swing.GroupLayout(panel_dashboard);
        panel_dashboard.setLayout(panel_dashboardLayout);
        panel_dashboardLayout.setHorizontalGroup(
            panel_dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dashboardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_barGraphCBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(panel_pieGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(panel_barGraphCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel_dashboardLayout.setVerticalGroup(
            panel_dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dashboardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_barGraphCBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_pieGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_barGraphCBM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Dashboard", panel_dashboard);

        table_cases.setAutoCreateRowSorter(true);
        table_cases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student", "Reported", "On Site", "Period 1", "Period 2", "Period 3", "Period 4", "Period 5", "Period 6", "Period 7", "Period 8", "Period 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane.setViewportView(table_cases);

        javax.swing.GroupLayout panel_casesLayout = new javax.swing.GroupLayout(panel_cases);
        panel_cases.setLayout(panel_casesLayout);
        panel_casesLayout.setHorizontalGroup(
            panel_casesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1627, Short.MAX_VALUE)
        );
        panel_casesLayout.setVerticalGroup(
            panel_casesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Cases", panel_cases);

        comboBox_schedules.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT Schedule" }));
        comboBox_schedules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_schedulesActionPerformed(evt);
            }
        });

        button_scheduleAdd.setText("Add");
        button_scheduleAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scheduleAddActionPerformed(evt);
            }
        });

        button_scheduleEdit.setText("Edit");
        button_scheduleEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scheduleEditActionPerformed(evt);
            }
        });

        button_scheduleDelete.setText("Delete");
        button_scheduleDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scheduleDeleteActionPerformed(evt);
            }
        });

        label_scheduleId.setText("Name");

        textField_scheduleId.setEditable(false);

        label_scheduleP1.setText("Period 1");

        textField_scheduleP1.setEditable(false);

        label_scheduleP2.setText("Period 2");

        textField_scheduleP2.setEditable(false);

        label_scheduleP3.setText("Period 3");

        textField_scheduleP3.setEditable(false);

        label_scheduleP4.setText("Period 4");

        textField_scheduleP4.setEditable(false);

        label_scheduleP5.setText("Period 5");

        textField_scheduleP5.setEditable(false);

        label_scheduleP6.setText("Period 6");

        textField_scheduleP6.setEditable(false);

        label_scheduleP7.setText("Period 7");

        textField_scheduleP7.setEditable(false);

        label_scheduleP8.setText("Period 8");

        textField_scheduleP8.setEditable(false);

        label_scheduleP9.setText("Period 9");

        textField_scheduleP9.setEditable(false);

        javax.swing.GroupLayout panel_scheduleFieldsLayout = new javax.swing.GroupLayout(panel_scheduleFields);
        panel_scheduleFields.setLayout(panel_scheduleFieldsLayout);
        panel_scheduleFieldsLayout.setHorizontalGroup(
            panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_scheduleFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_scheduleFieldsLayout.createSequentialGroup()
                        .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_scheduleP1)
                            .addComponent(label_scheduleId))
                        .addGap(18, 18, 18)
                        .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textField_scheduleP1)
                            .addComponent(textField_scheduleId)))
                    .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_scheduleFieldsLayout.createSequentialGroup()
                            .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_scheduleP2)
                                    .addComponent(label_scheduleP3))
                                .addComponent(label_scheduleP4)
                                .addComponent(label_scheduleP5))
                            .addGap(18, 18, 18)
                            .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textField_scheduleP3, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                                .addComponent(textField_scheduleP2)
                                .addComponent(textField_scheduleP5)
                                .addComponent(textField_scheduleP4)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_scheduleFieldsLayout.createSequentialGroup()
                            .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_scheduleP6)
                                    .addComponent(label_scheduleP7)
                                    .addComponent(label_scheduleP8, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(label_scheduleP9))
                            .addGap(18, 18, 18)
                            .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(textField_scheduleP9)
                                .addComponent(textField_scheduleP7)
                                .addComponent(textField_scheduleP6)
                                .addComponent(textField_scheduleP8)))))
                .addContainerGap())
        );
        panel_scheduleFieldsLayout.setVerticalGroup(
            panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_scheduleFieldsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_scheduleId)
                    .addComponent(textField_scheduleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_scheduleP6)
                    .addComponent(textField_scheduleP6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_scheduleFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_scheduleP9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scheduleP9))
                .addContainerGap())
        );

        label_caseNum.setText("Case#");

        label_caseP1.setText("Period 1");

        textField_caseP1.setEditable(false);

        label_caseP2.setText("Period 2");

        textField_caseP2.setEditable(false);

        label_caseP3.setText("Period 3");

        textField_caseP3.setEditable(false);

        label_caseP4.setText("Period 4");

        textField_caseP4.setEditable(false);

        label_caseP5.setText("Period 5");

        textField_caseP5.setEditable(false);

        label_caseP6.setText("Period 6");

        textField_caseP6.setEditable(false);

        label_caseP7.setText("Period 7");

        textField_caseP7.setEditable(false);

        label_caseP8.setText("Period 8");

        textField_caseP8.setEditable(false);

        label_caseP9.setText("Period 9");

        textField_caseP9.setEditable(false);

        javax.swing.GroupLayout panel_casesFieldsLayout = new javax.swing.GroupLayout(panel_casesFields);
        panel_casesFields.setLayout(panel_casesFieldsLayout);
        panel_casesFieldsLayout.setHorizontalGroup(
            panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                        .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                                .addComponent(label_caseNum)
                                .addGap(25, 25, 25)
                                .addComponent(label_caseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                                    .addComponent(label_caseP1)
                                    .addGap(18, 18, 18)
                                    .addComponent(textField_caseP1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
                                .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                                    .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_caseP2)
                                            .addComponent(label_caseP3))
                                        .addComponent(label_caseP4)
                                        .addComponent(label_caseP5))
                                    .addGap(18, 18, 18)
                                    .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(textField_caseP3)
                                        .addComponent(textField_caseP5)
                                        .addComponent(textField_caseP4)
                                        .addComponent(textField_caseP2)))
                                .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                                    .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label_caseP6)
                                        .addComponent(label_caseP7)
                                        .addComponent(label_caseP9))
                                    .addGap(18, 18, 18)
                                    .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(textField_caseP9)
                                        .addComponent(textField_caseP7)
                                        .addComponent(textField_caseP6)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_casesFieldsLayout.createSequentialGroup()
                        .addComponent(label_caseP8)
                        .addGap(18, 18, 18)
                        .addComponent(textField_caseP8)))
                .addContainerGap())
        );
        panel_casesFieldsLayout.setVerticalGroup(
            panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_casesFieldsLayout.createSequentialGroup()
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_casesFieldsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(label_caseDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_casesFieldsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label_caseNum)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_caseP6)
                    .addComponent(textField_caseP6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP7))
                .addGap(11, 11, 11)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_casesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_caseP9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_caseP9))
                .addContainerGap())
        );

        comboBox_matches.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT Case" }));
        comboBox_matches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_matchesActionPerformed(evt);
            }
        });

        button_scheduleOK.setText("OK");
        button_scheduleOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scheduleOKActionPerformed(evt);
            }
        });

        button_scheduleCancel.setText("Cancel");
        button_scheduleCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scheduleCancelActionPerformed(evt);
            }
        });

        label_casesFound.setText("Cases Found");

        textField_matchesP1.setEditable(false);

        textField_matchesP2.setEditable(false);

        textField_matchesP3.setEditable(false);

        textField_matchesP4.setEditable(false);

        textField_matchesP5.setEditable(false);

        textField_matchesP6.setEditable(false);

        textField_matchesP7.setEditable(false);

        textField_matchesP8.setEditable(false);

        textField_matchesP9.setEditable(false);

        javax.swing.GroupLayout panel_matchesFieldsLayout = new javax.swing.GroupLayout(panel_matchesFields);
        panel_matchesFields.setLayout(panel_matchesFieldsLayout);
        panel_matchesFieldsLayout.setHorizontalGroup(
            panel_matchesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_matchesFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_matchesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textField_matchesP2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(textField_matchesP3)
                    .addComponent(textField_matchesP4)
                    .addComponent(textField_matchesP5)
                    .addComponent(textField_matchesP6)
                    .addComponent(textField_matchesP7)
                    .addComponent(textField_matchesP8)
                    .addComponent(textField_matchesP1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textField_matchesP9))
                .addContainerGap())
            .addGroup(panel_matchesFieldsLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(label_casesFound)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_matchesFieldsLayout.setVerticalGroup(
            panel_matchesFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_matchesFieldsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(label_casesFound)
                .addGap(18, 18, 18)
                .addComponent(textField_matchesP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField_matchesP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField_matchesP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField_matchesP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField_matchesP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField_matchesP6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField_matchesP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(textField_matchesP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField_matchesP9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comboBox_departmentP7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP7ActionPerformed(evt);
            }
        });

        comboBox_subjectP7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP7ActionPerformed(evt);
            }
        });

        comboBox_courseP7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP7ActionPerformed(evt);
            }
        });

        comboBox_departmentP8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP8ActionPerformed(evt);
            }
        });

        comboBox_subjectP8.setToolTipText("");
        comboBox_subjectP8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP8ActionPerformed(evt);
            }
        });

        comboBox_courseP8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP8ActionPerformed(evt);
            }
        });

        comboBox_departmentP9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP9ActionPerformed(evt);
            }
        });

        comboBox_subjectP9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP9ActionPerformed(evt);
            }
        });

        comboBox_courseP9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP9ActionPerformed(evt);
            }
        });

        comboBox_departmentP6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP6ActionPerformed(evt);
            }
        });

        comboBox_subjectP6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP6ActionPerformed(evt);
            }
        });

        comboBox_courseP6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP6ActionPerformed(evt);
            }
        });

        comboBox_departmentP5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP5ActionPerformed(evt);
            }
        });

        comboBox_subjectP5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP5ActionPerformed(evt);
            }
        });

        comboBox_courseP5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP5ActionPerformed(evt);
            }
        });

        comboBox_subjectP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP4ActionPerformed(evt);
            }
        });

        comboBox_departmentP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP4ActionPerformed(evt);
            }
        });

        comboBox_courseP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP4ActionPerformed(evt);
            }
        });

        comboBox_departmentP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP3ActionPerformed(evt);
            }
        });

        comboBox_subjectP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP3ActionPerformed(evt);
            }
        });

        comboBox_courseP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP3ActionPerformed(evt);
            }
        });

        comboBox_departmentP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP2ActionPerformed(evt);
            }
        });

        comboBox_courseP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP2ActionPerformed(evt);
            }
        });

        comboBox_departmentP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_departmentP1ActionPerformed(evt);
            }
        });

        comboBox_subjectP1.setToolTipText("");
        comboBox_subjectP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP1ActionPerformed(evt);
            }
        });

        comboBox_courseP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_courseP1ActionPerformed(evt);
            }
        });

        label_subject.setText("Subject");

        label_course.setText("Course");

        label_section.setText("Section");

        comboBox_subjectP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_subjectP2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_comboBoxesLayout = new javax.swing.GroupLayout(panel_comboBoxes);
        panel_comboBoxes.setLayout(panel_comboBoxesLayout);
        panel_comboBoxesLayout.setHorizontalGroup(
            panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_comboBoxesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBox_departmentP1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_departmentP9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(comboBox_subjectP9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBox_courseP1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel_comboBoxesLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(label_subject)
                .addGap(161, 161, 161)
                .addComponent(label_course)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label_section)
                .addGap(98, 98, 98))
        );
        panel_comboBoxesLayout.setVerticalGroup(
            panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_comboBoxesLayout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_subject)
                    .addComponent(label_section)
                    .addComponent(label_course))
                .addGap(18, 18, 18)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_comboBoxesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_departmentP9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_courseP9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox_subjectP9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_exposureLayout = new javax.swing.GroupLayout(panel_exposure);
        panel_exposure.setLayout(panel_exposureLayout);
        panel_exposureLayout.setHorizontalGroup(
            panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_exposureLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_exposureLayout.createSequentialGroup()
                        .addComponent(comboBox_schedules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(button_scheduleAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_scheduleEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_scheduleDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_scheduleOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_scheduleCancel))
                    .addGroup(panel_exposureLayout.createSequentialGroup()
                        .addComponent(panel_scheduleFields, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_matchesFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addGroup(panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBox_matches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_exposureLayout.createSequentialGroup()
                        .addComponent(panel_casesFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_comboBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_exposureLayout.setVerticalGroup(
            panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_exposureLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel_comboBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_exposureLayout.createSequentialGroup()
                        .addGroup(panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox_schedules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button_scheduleAdd)
                            .addComponent(button_scheduleEdit)
                            .addComponent(button_scheduleDelete)
                            .addComponent(button_scheduleOK)
                            .addComponent(button_scheduleCancel)
                            .addComponent(comboBox_matches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(88, 88, 88)
                        .addGroup(panel_exposureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panel_casesFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_scheduleFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_matchesFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(289, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Exposure", panel_exposure);

        javax.swing.GroupLayout panel_overviewLayout = new javax.swing.GroupLayout(panel_overview);
        panel_overview.setLayout(panel_overviewLayout);
        panel_overviewLayout.setHorizontalGroup(
            panel_overviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1627, Short.MAX_VALUE)
        );
        panel_overviewLayout.setVerticalGroup(
            panel_overviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 812, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Campus Overview", panel_overview);

        menu_file.setText("File");

        menuItem_open.setText("Open");
        menuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_open);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_save);

        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_saveAs);

        menuItem_close.setText("Close");
        menu_file.add(menuItem_close);

        jMenuBar1.add(menu_file);

        menu_edit.setText("Edit");
        jMenuBar1.add(menu_edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBox_schedulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_schedulesActionPerformed
        // Uses selected item as the key to get the schedule from the <schedules>
        // TreeMap.  Once the Schedule is retrieved, uses the values from the
        // Schedule object to populate the schedule textboxes on the Exposure Tab
        
        String selectedItem = (String)comboBox_schedules.getSelectedItem();
        
        if (selectedItem == null) {
            return;
        }
        
        if (selectedItem.equals("SELECT Schedule")) {
            textField_scheduleId.setText("");
            for (int p = 0; p < 9; p++){
                scheduleFields[p].setText("");
            }
            resetBackgroundColors();
            
           
            // Calls this method with null so that matches are not built for 
            // "SELECT Item". This allows for the findCaseMatches to clear the 
            // "Cases Found" fields and <matches> TreeSet.
            findCaseMatches(null);

        } else {
        
            Schedule schedule = schedules.get(selectedItem);

            textField_scheduleId.setText(schedule.getId());
            for (int p = 0; p < 9; p++){
                scheduleFields[p].setText(schedule.getPeriods()[p].getName());
            }
            
            findCaseMatches(schedule);
            buildMatchesComboBox();
            highlightFields();
        }
        
    }//GEN-LAST:event_comboBox_schedulesActionPerformed

    private void comboBox_matchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_matchesActionPerformed

        String caseNum = (String)comboBox_matches.getSelectedItem();
        
        // When items are added to a comboBox, the actionPerformed(ActionEvent) 
        // method is fired.  This causes a null pointer exception because there
        // is nothing in the comboBox until items are added. In this case, the
        // selected item will be null. Therefore, must return out of this method
        // so that items can be added to the comboBox.  Once items are added, 
        // there is no null pointer.  

        if (caseNum == null) {
            return;
        }
        
        //When "SELECT Case" is selected, set all the fields to blank strings
        if (caseNum.equals("SELECT Case")) {
            label_caseDescription.setText("");
            for (int p = 0; p < 9; p++){
                caseFields[p].setText("");
            }
            resetBackgroundColors();
            return;
        }
        
        //sets the caseDescription label to the selected case number, grade,
        //reportDate, and LocationDate
        //Output should look like "id - Grade x (report date, last date)"
        Integer grade = cases.get(Integer.parseInt(caseNum)).getGrade();
        Object reportDate = getShortDateOutput(cases.get(Integer.parseInt(caseNum)).getReportDate());
        Object locationDate = getShortDateOutput(cases.get(Integer.parseInt(caseNum)).getLocationDate());
        label_caseDescription.setText(caseNum + " - Grade " + grade + " (" + reportDate + ", " + locationDate + ")");
        
        for (int p = 0; p < 9; p++){
            caseFields[p].setText(cases.get(Integer.parseInt(caseNum)).getPeriods()[p].getName());
        }
        
        highlightFields();
        
    }//GEN-LAST:event_comboBox_matchesActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        // Creates a file choose for the user to select the save location and name.
        // Then, creates a VDModel with the <schedules> and <cases>. The
        // model is then saved to disk.
        
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            
            currentFile = jfc.getSelectedFile();
                
            menuItem_saveActionPerformed(evt);
            menuItem_save.setEnabled(true);
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openActionPerformed
        // Creates a file choose for the user to select a saved file.
        // Then, creates a VDModel with the  <schedules> and <cases>.
        // Then, <cases> and <schedules> are read from the file and run with the program.
        
        JFileChooser jfc = new JFileChooser();

        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {

            try {
                currentFile = jfc.getSelectedFile();

                FileInputStream fis = new FileInputStream(currentFile);
                ObjectInputStream ois = new ObjectInputStream(fis);

                VDModel model = (VDModel)ois.readObject();

                cases = model.getCases();
                schedules = model.getSchedules();

                buildCasesTable();
                buildSchedulesComboBox();
                menuItem_save.setEnabled(true);

                ois.close();
                
            } catch (ClassNotFoundException | IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuItem_openActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
        //Saves the model to disk
        
        if (currentFile == null){
            menuItem_saveAsActionPerformed(evt);
        }
        
        try {
            FileOutputStream fos = new FileOutputStream(currentFile);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
                
            oos.writeObject(new VDModel(cases, schedules));
 
            oos.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void button_scheduleAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scheduleAddActionPerformed
        //Method sets the properties so that a new schedule can be added to the model
        
        resetBackgroundColors();
        
        //toggels the visibility of needed/unneeded elements
        panel_matchesFields.setVisible(false);
        panel_casesFields.setVisible(false);
        comboBox_matches.setVisible(false);
        comboBox_schedules.setVisible(false);
        
        button_scheduleOK.setVisible(true);
        button_scheduleCancel.setVisible(true);
        panel_comboBoxes.setVisible(true);
        
        button_scheduleAdd.setVisible(false);
        button_scheduleEdit.setVisible(false);
        button_scheduleDelete.setVisible(false);
        
        for (int p = 0; p < 9; p++){
            
            //add all the departments to the department comboBoxes
            departmentBoxes[p].removeAllItems();
            departmentBoxes[p].addItem("None");
            departmentBoxes[p].addItem("CTE");
            departmentBoxes[p].addItem("English");
            departmentBoxes[p].addItem("Fine Arts");
            departmentBoxes[p].addItem("LOTE");
            departmentBoxes[p].addItem("Math");
            departmentBoxes[p].addItem("PE/Athletics");
            departmentBoxes[p].addItem("Social Studies");
            departmentBoxes[p].addItem("Science");
            departmentBoxes[p].addItem("Other");
            
            scheduleFields[p].setEditable(false);
            subjectBoxes[p].setVisible(false);
            courseBoxes[p].setVisible(false);
        }
        label_course.setVisible(false);
        label_section.setVisible(false);
        
        //sets the schedule textFields to blank, so a new schedule can be typed in
        textField_scheduleId.setText("");
        textField_scheduleId.setEditable(true);
        for (int p = 0; p < 9; p++){
            scheduleFields[p].setText("");
        }
    }//GEN-LAST:event_button_scheduleAddActionPerformed

    private void button_scheduleEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scheduleEditActionPerformed
        //Method sets the properties so that a schedule can be edited within the model
        
        resetBackgroundColors();
        
        if (comboBox_schedules.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "ERROR: No Schedule selected. Please choose a schedule to edit");
            return;
        }
        
        //toggels the visibility of needed/unneeded elements
        panel_matchesFields.setVisible(false);
        panel_casesFields.setVisible(false);
        comboBox_matches.setVisible(false);
        comboBox_schedules.setVisible(false);
        
        button_scheduleOK.setVisible(true);
        button_scheduleCancel.setVisible(true);
        panel_comboBoxes.setVisible(true);
        
        button_scheduleAdd.setVisible(false);
        button_scheduleEdit.setVisible(false);
        button_scheduleDelete.setVisible(false);
        
        for (int p = 0; p < 9; p++){
            
            //add all the departments to the department comboBoxes
            departmentBoxes[p].removeAllItems();
            departmentBoxes[p].addItem("None");
            departmentBoxes[p].addItem("CTE");
            departmentBoxes[p].addItem("English");
            departmentBoxes[p].addItem("Fine Arts");
            departmentBoxes[p].addItem("LOTE");
            departmentBoxes[p].addItem("Math");
            departmentBoxes[p].addItem("PE/Athletics");
            departmentBoxes[p].addItem("Social Studies");
            departmentBoxes[p].addItem("Science");
            departmentBoxes[p].addItem("Other");
            
            scheduleFields[p].setEditable(false);
            subjectBoxes[p].setVisible(false);
            courseBoxes[p].setVisible(false);
        }
        label_course.setVisible(false);
        label_section.setVisible(false);
        
        Schedule schedule = schedules.get((String)comboBox_schedules.getSelectedItem());
        textField_scheduleId.setText(schedule.getId());
        for (int p = 0; p < 9; p++){
            scheduleFields[p].setText(schedule.getPeriods()[p].getName());
        }
        
        //makes the <textField_scheduleId> so that a new "key" can be made for the schedule
        textField_scheduleId.setEditable(true);
    }//GEN-LAST:event_button_scheduleEditActionPerformed

    private void button_scheduleOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scheduleOKActionPerformed
        //method saves the new/editied schedule to the <schedules> TreeMap and the 
        //<comboBox_schedules> comboBox, and calls the menuItem_saveActionPerformed
        //method to autosave the model
        
        highlightFields();
        
        //if there has been an added/edited schedule
        //A blank scheduleId field should not be saved
        if (!textField_scheduleId.getText().equals("")){
            
            //creates a new schedule based on what in in the schedules textFields.
            String key = textField_scheduleId.getText();
            Period[] periods  = new Period[9];
                for (int p=0; p<periods.length; p++) {
                    periods[p] = new Period("", scheduleFields[p].getText(), "" , new Dimension());
                }
            Schedule schedule = new Schedule(key, periods);

            //puts the schedule in the TreeMap and the comboBox
            schedules.put(key, schedule); 
            buildSchedulesComboBox();

            //autosaves the model
            menuItem_saveActionPerformed(null);
        }
        
        
        //toggels the visibility of needed/unneeded elements
        panel_matchesFields.setVisible(true);
        panel_casesFields.setVisible(true);
        comboBox_matches.setVisible(true);
        comboBox_schedules.setVisible(true);
        
        button_scheduleOK.setVisible(false);
        button_scheduleCancel.setVisible(false);
        panel_comboBoxes.setVisible(false);
        
        button_scheduleAdd.setVisible(true);
        button_scheduleEdit.setVisible(true);
        button_scheduleDelete.setVisible(true);
        
        //resets fields to be not editable
        for (int p = 0; p < 9; p++){
            scheduleFields[p].setEditable(false);
        }
        textField_scheduleId.setEditable(false);
    }//GEN-LAST:event_button_scheduleOKActionPerformed

    private void button_scheduleCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scheduleCancelActionPerformed
        //method resets the program to the "normal" state with the case fields displayed
        
        highlightFields();
        
        //toggels the visibility of needed/unneeded elements
        panel_matchesFields.setVisible(true);
        panel_casesFields.setVisible(true);
        comboBox_matches.setVisible(true);
        comboBox_schedules.setVisible(true);
        
        button_scheduleOK.setVisible(false);
        button_scheduleCancel.setVisible(false);
        panel_comboBoxes.setVisible(false);
        
        button_scheduleAdd.setVisible(true);
        button_scheduleEdit.setVisible(true);
        button_scheduleDelete.setVisible(true);
        
        //resets fields to be not editable
        for (int p = 0; p < 9; p++){
            scheduleFields[p].setEditable(false);
        }
        comboBox_schedules.setSelectedIndex(0);
        textField_scheduleId.setEditable(false);
    }//GEN-LAST:event_button_scheduleCancelActionPerformed

    private void button_scheduleDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scheduleDeleteActionPerformed
        //method that deletes a schedule from the <schedules> TreeMap and the 
        //<comboBox_schedules> comboBox. After the schedule is deleted, the
        //menuItem_saveActionPerformed method is called and the
        //model is saved to the disk
        
        if (comboBox_schedules.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "ERROR: No Schedule selected. Please choose a schedule to delete");
            return;
        }
        
        if (JOptionPane.showConfirmDialog(this,
                                          "Are you sure you want to delete schedule:: " + comboBox_schedules.getSelectedItem() + "?",
                                          "DELETE Schedule Confirmation",
                                          JOptionPane.WARNING_MESSAGE,
                                          JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION) {

            //Delete the schedule
            schedules.remove((String)comboBox_schedules.getSelectedItem());
            
            //update the schedule comboBox
            comboBox_schedules.removeItem(comboBox_schedules.getSelectedItem());
            
            //save the program
            menuItem_saveActionPerformed(null);
        }
    }//GEN-LAST:event_button_scheduleDeleteActionPerformed

    private void comboBox_departmentP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP1ActionPerformed
        scheduleFields[0].setEditable(false);
        subjectBoxes[0].setVisible(true);
        
        String selected = (String)comboBox_departmentP1.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 1);
        comboBox_subjectP1.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP1.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP1ActionPerformed

    private void comboBox_departmentP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP2ActionPerformed
        scheduleFields[1].setEditable(false);
        subjectBoxes[1].setVisible(true);
        
        String selected = (String)comboBox_departmentP2.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 2);
        comboBox_subjectP2.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP2.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP2ActionPerformed

    private void comboBox_departmentP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP3ActionPerformed
        scheduleFields[2].setEditable(false);
        subjectBoxes[2].setVisible(true);
        
        String selected = (String)comboBox_departmentP3.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 3);
        comboBox_subjectP3.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP3.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP3ActionPerformed

    private void comboBox_departmentP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP4ActionPerformed
        scheduleFields[3].setEditable(false);
        subjectBoxes[3].setVisible(true);
        
        String selected = (String)comboBox_departmentP4.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 4);
        comboBox_subjectP4.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP4.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP4ActionPerformed

    private void comboBox_departmentP5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP5ActionPerformed
        scheduleFields[4].setEditable(false);
        subjectBoxes[4].setVisible(true);
        
        String selected = (String)comboBox_departmentP5.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 5);
        comboBox_subjectP5.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP5.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP5ActionPerformed

    private void comboBox_departmentP6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP6ActionPerformed
        scheduleFields[5].setEditable(false);
        subjectBoxes[5].setVisible(true);
        
        String selected = (String)comboBox_departmentP6.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 6);
        comboBox_subjectP6.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP6.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP6ActionPerformed

    private void comboBox_departmentP7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP7ActionPerformed
        scheduleFields[6].setEditable(false);
        subjectBoxes[6].setVisible(true);
        
        String selected = (String)comboBox_departmentP7.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 7);
        comboBox_subjectP7.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP7.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP7ActionPerformed

    private void comboBox_departmentP8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP8ActionPerformed
        scheduleFields[7].setEditable(false);
        subjectBoxes[7].setVisible(true);
        
        String selected = (String)comboBox_departmentP8.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 8);
        comboBox_subjectP8.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP8.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP8ActionPerformed

    private void comboBox_departmentP9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_departmentP9ActionPerformed
        scheduleFields[8].setEditable(false);
        subjectBoxes[8].setVisible(true);
        
        String selected = (String)comboBox_departmentP9.getSelectedItem();
        String[] names = dataFactory.getCourses(selected, 9);
        comboBox_subjectP9.setModel(new DefaultComboBoxModel(names));
        comboBox_courseP9.removeAllItems();
        
        label_course.setVisible(true);
    }//GEN-LAST:event_comboBox_departmentP9ActionPerformed

    private void comboBox_subjectP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP1ActionPerformed
        courseBoxes[0].setVisible(true);
        
        String selected = (String)comboBox_subjectP1.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 1);
        comboBox_courseP1.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP1ActionPerformed

    private void comboBox_subjectP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP2ActionPerformed
        courseBoxes[1].setVisible(true);
        
        String selected = (String)comboBox_subjectP2.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 2);
        comboBox_courseP2.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP2ActionPerformed

    private void comboBox_subjectP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP3ActionPerformed
        courseBoxes[2].setVisible(true);
        
        String selected = (String)comboBox_subjectP3.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 3);
        comboBox_courseP3.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP3ActionPerformed

    private void comboBox_subjectP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP4ActionPerformed
        courseBoxes[3].setVisible(true);
        
        String selected = (String)comboBox_subjectP4.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 4);
        comboBox_courseP4.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP4ActionPerformed

    private void comboBox_subjectP5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP5ActionPerformed
        courseBoxes[4].setVisible(true);
        
        String selected = (String)comboBox_subjectP5.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 5);
        comboBox_courseP5.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP5ActionPerformed

    private void comboBox_subjectP6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP6ActionPerformed
        courseBoxes[5].setVisible(true);
        
        String selected = (String)comboBox_subjectP6.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 6);
        comboBox_courseP6.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP6ActionPerformed

    private void comboBox_subjectP7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP7ActionPerformed
        courseBoxes[6].setVisible(true);
        
        String selected = (String)comboBox_subjectP7.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 7);
        comboBox_courseP7.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP7ActionPerformed

    private void comboBox_subjectP8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP8ActionPerformed
        courseBoxes[7].setVisible(true);
        
        String selected = (String)comboBox_subjectP8.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 8);
        comboBox_courseP8.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP8ActionPerformed

    private void comboBox_subjectP9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_subjectP9ActionPerformed
        courseBoxes[8].setVisible(true);
        
        String selected = (String)comboBox_subjectP9.getSelectedItem();
        String[] names = dataFactory.getSections(selected, 9);
        comboBox_courseP9.setModel(new DefaultComboBoxModel(names));
        
        label_section.setVisible(true);
    }//GEN-LAST:event_comboBox_subjectP9ActionPerformed

    private void comboBox_courseP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP1ActionPerformed
        String description = (String)comboBox_subjectP1.getSelectedItem();
        String room = (String)comboBox_courseP1.getSelectedItem();
        textField_scheduleP1.setText(dataFactory.getIdentifier(description, 1, room));
    }//GEN-LAST:event_comboBox_courseP1ActionPerformed

    private void comboBox_courseP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP2ActionPerformed
        String description = (String)comboBox_subjectP2.getSelectedItem();
        String room = (String)comboBox_courseP2.getSelectedItem();
        textField_scheduleP2.setText(dataFactory.getIdentifier(description, 2, room));
    }//GEN-LAST:event_comboBox_courseP2ActionPerformed

    private void comboBox_courseP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP3ActionPerformed
        String description = (String)comboBox_subjectP3.getSelectedItem();
        String room = (String)comboBox_courseP3.getSelectedItem();
        textField_scheduleP3.setText(dataFactory.getIdentifier(description, 3, room));
    }//GEN-LAST:event_comboBox_courseP3ActionPerformed

    private void comboBox_courseP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP4ActionPerformed
        String description = (String)comboBox_subjectP4.getSelectedItem();
        String room = (String)comboBox_courseP4.getSelectedItem();
        textField_scheduleP4.setText(dataFactory.getIdentifier(description, 4, room));
    }//GEN-LAST:event_comboBox_courseP4ActionPerformed

    private void comboBox_courseP5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP5ActionPerformed
        String description = (String)comboBox_subjectP5.getSelectedItem();
        String room = (String)comboBox_courseP5.getSelectedItem();
        textField_scheduleP5.setText(dataFactory.getIdentifier(description, 5, room));
    }//GEN-LAST:event_comboBox_courseP5ActionPerformed

    private void comboBox_courseP6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP6ActionPerformed
        String description = (String)comboBox_subjectP6.getSelectedItem();
        String room = (String)comboBox_courseP6.getSelectedItem();
        textField_scheduleP6.setText(dataFactory.getIdentifier(description, 6, room));
    }//GEN-LAST:event_comboBox_courseP6ActionPerformed

    private void comboBox_courseP7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP7ActionPerformed
        String description = (String)comboBox_subjectP7.getSelectedItem();
        String room = (String)comboBox_courseP7.getSelectedItem();
        textField_scheduleP7.setText(dataFactory.getIdentifier(description, 7, room));
    }//GEN-LAST:event_comboBox_courseP7ActionPerformed

    private void comboBox_courseP8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP8ActionPerformed
        String description = (String)comboBox_subjectP8.getSelectedItem();
        String room = (String)comboBox_courseP8.getSelectedItem();
        textField_scheduleP8.setText(dataFactory.getIdentifier(description, 8, room));
    }//GEN-LAST:event_comboBox_courseP8ActionPerformed

    private void comboBox_courseP9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_courseP9ActionPerformed
        String description = (String)comboBox_subjectP9.getSelectedItem();
        String room = (String)comboBox_courseP9.getSelectedItem();
        textField_scheduleP9.setText(dataFactory.getIdentifier(description, 9, room));
    }//GEN-LAST:event_comboBox_courseP9ActionPerformed

    private void button_fillCBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_fillCBGActionPerformed
        ((GraphicsPanelCBG)panel_barGraphCBG).setGrades(countGrades());
    }//GEN-LAST:event_button_fillCBGActionPerformed

    private void button_fillCBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_fillCBMActionPerformed
        ((GraphicsPanelCBM)panel_barGraphCBM).setMonths(countMonths());
    }//GEN-LAST:event_button_fillCBMActionPerformed

    private void comboBox_graphPickerPieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_graphPickerPieActionPerformed
        String selected = (String)comboBox_graphPickerPie.getSelectedItem();
        
        if (selected.equals("Select Graph")) {
            ((GraphicsPanelPie)panel_pieGraph).setValues(null);
        }
        
        else if (selected.equals("by Grade")) {
            ((GraphicsPanelPie)panel_pieGraph).setValues(countGrades());
        }
        
        else if (selected.equals("by Month")) {
            ((GraphicsPanelPie)panel_pieGraph).setValues(countMonths());
        }
    }//GEN-LAST:event_comboBox_graphPickerPieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_fillCBG;
    private javax.swing.JButton button_fillCBM;
    private javax.swing.JButton button_scheduleAdd;
    private javax.swing.JButton button_scheduleCancel;
    private javax.swing.JButton button_scheduleDelete;
    private javax.swing.JButton button_scheduleEdit;
    private javax.swing.JButton button_scheduleOK;
    private javax.swing.JComboBox<String> comboBox_courseP1;
    private javax.swing.JComboBox<String> comboBox_courseP2;
    private javax.swing.JComboBox<String> comboBox_courseP3;
    private javax.swing.JComboBox<String> comboBox_courseP4;
    private javax.swing.JComboBox<String> comboBox_courseP5;
    private javax.swing.JComboBox<String> comboBox_courseP6;
    private javax.swing.JComboBox<String> comboBox_courseP7;
    private javax.swing.JComboBox<String> comboBox_courseP8;
    private javax.swing.JComboBox<String> comboBox_courseP9;
    private javax.swing.JComboBox<String> comboBox_departmentP1;
    private javax.swing.JComboBox<String> comboBox_departmentP2;
    private javax.swing.JComboBox<String> comboBox_departmentP3;
    private javax.swing.JComboBox<String> comboBox_departmentP4;
    private javax.swing.JComboBox<String> comboBox_departmentP5;
    private javax.swing.JComboBox<String> comboBox_departmentP6;
    private javax.swing.JComboBox<String> comboBox_departmentP7;
    private javax.swing.JComboBox<String> comboBox_departmentP8;
    private javax.swing.JComboBox<String> comboBox_departmentP9;
    private javax.swing.JComboBox<String> comboBox_graphPickerPie;
    private javax.swing.JComboBox<String> comboBox_matches;
    private javax.swing.JComboBox<String> comboBox_schedules;
    private javax.swing.JComboBox<String> comboBox_subjectP1;
    private javax.swing.JComboBox<String> comboBox_subjectP2;
    private javax.swing.JComboBox<String> comboBox_subjectP3;
    private javax.swing.JComboBox<String> comboBox_subjectP4;
    private javax.swing.JComboBox<String> comboBox_subjectP5;
    private javax.swing.JComboBox<String> comboBox_subjectP6;
    private javax.swing.JComboBox<String> comboBox_subjectP7;
    private javax.swing.JComboBox<String> comboBox_subjectP8;
    private javax.swing.JComboBox<String> comboBox_subjectP9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel label_caseDescription;
    private javax.swing.JLabel label_caseNum;
    private javax.swing.JLabel label_caseP1;
    private javax.swing.JLabel label_caseP2;
    private javax.swing.JLabel label_caseP3;
    private javax.swing.JLabel label_caseP4;
    private javax.swing.JLabel label_caseP5;
    private javax.swing.JLabel label_caseP6;
    private javax.swing.JLabel label_caseP7;
    private javax.swing.JLabel label_caseP8;
    private javax.swing.JLabel label_caseP9;
    private javax.swing.JLabel label_casesFound;
    private javax.swing.JLabel label_course;
    private javax.swing.JLabel label_scheduleId;
    private javax.swing.JLabel label_scheduleP1;
    private javax.swing.JLabel label_scheduleP2;
    private javax.swing.JLabel label_scheduleP3;
    private javax.swing.JLabel label_scheduleP4;
    private javax.swing.JLabel label_scheduleP5;
    private javax.swing.JLabel label_scheduleP6;
    private javax.swing.JLabel label_scheduleP7;
    private javax.swing.JLabel label_scheduleP8;
    private javax.swing.JLabel label_scheduleP9;
    private javax.swing.JLabel label_section;
    private javax.swing.JLabel label_subject;
    private javax.swing.JMenuItem menuItem_close;
    private javax.swing.JMenuItem menuItem_open;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JPanel panel_barGraphCBG;
    private javax.swing.JPanel panel_barGraphCBM;
    private javax.swing.JPanel panel_cases;
    private javax.swing.JPanel panel_casesFields;
    private javax.swing.JPanel panel_comboBoxes;
    private javax.swing.JPanel panel_dashboard;
    private javax.swing.JPanel panel_exposure;
    private javax.swing.JPanel panel_matchesFields;
    private javax.swing.JPanel panel_overview;
    private javax.swing.JPanel panel_pieGraph;
    private javax.swing.JPanel panel_scheduleFields;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_cases;
    private javax.swing.JTextField textField_caseP1;
    private javax.swing.JTextField textField_caseP2;
    private javax.swing.JTextField textField_caseP3;
    private javax.swing.JTextField textField_caseP4;
    private javax.swing.JTextField textField_caseP5;
    private javax.swing.JTextField textField_caseP6;
    private javax.swing.JTextField textField_caseP7;
    private javax.swing.JTextField textField_caseP8;
    private javax.swing.JTextField textField_caseP9;
    private javax.swing.JTextField textField_matchesP1;
    private javax.swing.JTextField textField_matchesP2;
    private javax.swing.JTextField textField_matchesP3;
    private javax.swing.JTextField textField_matchesP4;
    private javax.swing.JTextField textField_matchesP5;
    private javax.swing.JTextField textField_matchesP6;
    private javax.swing.JTextField textField_matchesP7;
    private javax.swing.JTextField textField_matchesP8;
    private javax.swing.JTextField textField_matchesP9;
    private javax.swing.JTextField textField_scheduleId;
    private javax.swing.JTextField textField_scheduleP1;
    private javax.swing.JTextField textField_scheduleP2;
    private javax.swing.JTextField textField_scheduleP3;
    private javax.swing.JTextField textField_scheduleP4;
    private javax.swing.JTextField textField_scheduleP5;
    private javax.swing.JTextField textField_scheduleP6;
    private javax.swing.JTextField textField_scheduleP7;
    private javax.swing.JTextField textField_scheduleP8;
    private javax.swing.JTextField textField_scheduleP9;
    // End of variables declaration//GEN-END:variables

    private void loadSampleData() {
        loadCasesFromFile();
        loadSchedulesFromFile(); 
    }

    private void loadCasesFromFile() {
        try {
            // Use a Scanner object to read static data from a csv file.
            // Data is a copy of the rawdata from the LISD COVID19 dashboard.
            // Method will only add Vandegrift HS Cases to the Cases TreeSet.

            Scanner file = new Scanner(new File("dat" + File.separator + "caseData.csv"));
            
            // First two lines of the dat file include column headers and general
            // information.  Will need to skip these lines to start reading case data.
            file.nextLine();
            file.nextLine();
            
            while (file.hasNextLine()) {
                
                String line = file.nextLine();
                Scanner lineData = new Scanner(line);
                lineData.useDelimiter(",");
                
                // Read the data and assigned to variables for prociessing
                String lstDate      = lineData.next();
                String caseNum      = lineData.next();
                String rprtDate     = lineData.next();
                String staffStudent = lineData.next();
                String location     = lineData.next();

                // For cases that have a location as Vandegrift HS
                // Process/convert/cast data strings into the correct data types
                // Creat a Case and add case to the <cases> TreeSet
                if (location.equals("Vandegrift HS")) {
                    
                    String gr           = lineData.next();
                    String esRoom       = lineData.next();
                    String period1      = lineData.next();
                    String period2      = lineData.next();
                    String period3      = lineData.next();
                    String period4      = lineData.next();
                    String period5      = lineData.next();
                    String period6      = lineData.next();
                    String period7      = lineData.next();
                    String period8      = lineData.next();
                    String period9      = lineData.next();
                    
                    // Convert the lastDate and reportDate strings into a Gregorian Calender Object
                    GregorianCalendar lastDate = getDate(lstDate);
                    GregorianCalendar reportDate = getDate(rprtDate);
                    
                    boolean student = staffStudent.equals("Student");
                    
                    // Build Period[] array for the Schedule Constructor from Case
                    Period[] periods = new Period[9];
                    String[] courses = {period1, period2, period3, period4, period5,period6, period7, period8, period9};
                  
                    for (int i=0; i<periods.length; i++) {
                        periods[i] = new Period("", courses[i], "", new Dimension());
                    }
                    
                    
                    // Staff are assigned a default grade of 0
                    // Students will use the grade field from the LISD Dashbaord data.
                    // Student grade level must be stripped from the grade field
                    // so that there is only a numeric value.
                    Integer grade = 0;
                    
                    if (student) {                    
                        grade = Integer.parseInt(gr.substring(0,gr.indexOf("t")));
                    }
                    
                    Case c = new Case(reportDate, lastDate, true, student, grade, caseNum, periods);
                    
                    cases.put(Integer.parseInt(caseNum),c);
                
                }

            }
                       
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Development.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void loadSchedulesFromFile() {
        // Load the schedule data from the file "schedulesData.csv" into the 
        // <scheduels> TreeMap. 
        
        try {
            Scanner file = new Scanner(new File("dat" + File.separator + "scheduleData.csv"));
            
            while (file.hasNextLine()) {
                
                
                Scanner line = new Scanner(file.nextLine()) ;                              
                line.useDelimiter(",");
                
                String key = line.next();
                Period[] periods  = new Period[9];
                
                for (int i=0; i<periods.length; i++) {
                    periods[i] = new Period("",line.next(),"", new Dimension());
                }
                
                Schedule schedule = new Schedule(key, periods);
                
                schedules.put(key, schedule);
                
            } 
            
        } catch(FileNotFoundException e) {
            System.out.println(e.toString());
        }

    }

    private GregorianCalendar getDate(String date) {
        
        String[] digits = date.split("/");
        
        int month   = Integer.parseInt(digits[0]);
        int day     = Integer.parseInt(digits[1]);
        int year    = Integer.parseInt(digits[2]);
        
        return new GregorianCalendar(year, month-1, day);
    }

    private void buildCasesTable() {
        // Updates <table_cases> with the <cases> TreeSet data.  Will build the
        // data by iterating through cases to build an Object[].  The array will
        // be added to the table one row at a time using model.addRow(Object[]).
        
        DefaultTableModel model = (DefaultTableModel)table_cases.getModel();
        model.setRowCount(0);
        
        for (Integer key : cases.keySet() ){
            // Gets each case and builds an Object[] array out of the data
            
            Case c = cases.get(key);
            
            Object[] row = new Object[13];
            row[0] = c.getId();
            row[1] = (c.isStudent()) ? c.getGrade() : "STAFF";
            row[2] = getShortDateOutput(c.getReportDate());
            row[3] = getShortDateOutput(c.getLocationDate());
            
            for (int i=0; i<c.getPeriods().length; i++) {
                row[i+4] = c.getPeriods()[i].getName();
            }
            
            model.addRow(row);

        }
    
    }

    private Object getShortDateOutput(GregorianCalendar date) {
       int month    = date.get(Calendar.MONTH)+1;
       int day      = date.get(Calendar.DAY_OF_MONTH);
       int year     = date.get(Calendar.YEAR);
            
       return month + "/" + day + "/" + year;    
    
    }

    private void buildSchedulesComboBox() {
        // Loops through the <schedules> TreeMap and uses the Schedule.id as
        // the item to be placed into the comboBox.
        // Item 0 will always be "SELECT Schedule"
        
        comboBox_schedules.removeAllItems();
        comboBox_schedules.addItem("SELECT Schedule");
        if (schedules.isEmpty()) return;
        
        for (String key : schedules.keySet()) {
            comboBox_schedules.addItem(key);
        }
    }

    private void findCaseMatches(Schedule schedule) {
        //Loops through the periods in paramater <schedule> to find if there is 
        //a match in the <cases> TreeMap
        //If there is add the match to the <matches> TreeSet
        
        // Resets the <matches> so that new cases are added for just the selected.
        matches = new TreeSet<>();
        
        // Load TextFields for Matched cases into an array so that they can be
        // hashed when updating "Cases Found" text fields.
        JTextField[] matchFields = new JTextField[9];
        
        matchFields[0] = textField_matchesP1;
        matchFields[1] = textField_matchesP2;
        matchFields[2] = textField_matchesP3;
        matchFields[3] = textField_matchesP4;
        matchFields[4] = textField_matchesP5;
        matchFields[5] = textField_matchesP6;
        matchFields[6] = textField_matchesP7;
        matchFields[7] = textField_matchesP8;
        matchFields[8] = textField_matchesP9;
        
        // Clear Fields for the new schedule.  Also serves to clear the fields
        // when "SELECT Schedule" is selected for <comboBox_schedules>.
        for (int i=0; i<matchFields.length; i++) {
            matchFields[i].setText("");
        }
        
        //if the SELECT Schedule is picked from the schedule combo box
        //reset the matches combo box to say SELECT Case
        if (schedule==null){
            comboBox_matches.removeAllItems();
            comboBox_matches.addItem("SELECT Case");
            return;
        }

        // == SEARCH ALGORYTHM =================================================
        //Loops through each period possible (1-9)
        for (int p = 0 ; p < 9; p++){
            String text = "";
            
            //loop through each key in the <cases> TreeMap and matches the key to
            //the case that corresponds with the key that the loop is on
            for (Integer key : cases.keySet()){
                Case c = cases.get(key);
                
                //if the period in the schedule field matches a case from the cases,
                //is in the same index, and the period does not equal "N\A" then
                //the periods match.
                //If the periods match, add the case number to the <matches> TreeSet
                //and add the caseNum to the text that will be shown in the matchFields
                boolean match = schedule.getPeriods()[p].getName().equals(c.getPeriods()[p].getName());
                if (!schedule.getPeriods()[p].getName().equals("N/A") && match){
                    text = text + c.getId() + " ";
                    matches.add(Integer.parseInt(c.getId()));
                }
                
            }
            //set the text of the corresponding matches textFields to the
            //matching text fields
            matchFields[p].setText(text);
        }
    }

    private void buildMatchesComboBox() {       
        //Clears the matches comboBox, and loops through the <matches> TreeSet.
        //If the <matches> TreeSet is empty, don't fill the combo box.
        //If <matches> has items in it, fill the matches comboBox with the items
        //Item 0 will always be "SELECT Case"
        comboBox_matches.removeAllItems();
        
        if (matches.isEmpty()){
            comboBox_matches.addItem("SELECT Case");
            return;
        }
        
        comboBox_matches.addItem("SELECT Case");
        for (Integer match : matches) {
            comboBox_matches.addItem(match.toString());
        }
    }

    private void highlightFields() {
        //highlights the shceduleFields and the caseFields if they match each other
        //"N/A" should not match with "N/A"
        //A blank field should nto match with a blank field
        
        resetBackgroundColors();
        
        for (int p = 0; p < 9; p++){
            if (scheduleFields[p].getText().equals(caseFields[p].getText())){
                scheduleFields[p].setBackground(Color.pink);
                caseFields[p].setBackground(Color.pink);
            }
         
            if (scheduleFields[p].getText().equals("N/A") || scheduleFields[p].getText().equals("")){
                scheduleFields[p].setBackground(Color.white);
                caseFields[p].setBackground(Color.white);
            }
        }
    }

    private void resetBackgroundColors() {
        //method resets the background colors of the cases and schedules
        //text fields to be white
        
        for (int p = 0; p < 9; p++){
            scheduleFields[p].setBackground(Color.white);
            caseFields[p].setBackground(Color.white);
        }
    }

    private int[] countGrades() {
        
        //An ArrayList of Integers to be filled with the grade of each
        //reported covid case
        ArrayList<Integer> grades = new ArrayList<>();
        for (Integer key : cases.keySet()) {
            grades.add(cases.get(key).getGrade());
        }

        //create variables for each grade
        int staff = 0;
        int ninth = 0;
        int tenth = 0;
        int eleventh = 0;
        int twelfth = 0;
        //loop through the <grades> ArrayList to count the total amount of each grade
        for (Integer grade : grades) {
            if (grade == 9) ninth++;
            if (grade == 10) tenth++;
            if (grade == 11) eleventh++;
            if (grade == 12) twelfth++;
            if (grade == 0) staff++;
        }
        
        int[] gradeCount = {ninth, tenth, eleventh, twelfth, staff};
        
        return gradeCount;
    }

    private int[] countMonths() {
        
        //An ArrayList of integers that will be filled with the months
        //a covid case is reported
        ArrayList<Integer> reportDates = new ArrayList<>();
        for (Integer key : cases.keySet()) {
            reportDates.add((cases.get(key).getReportDate()).get(Calendar.MONTH)+1);
        }
            
        //create variables for each month
        int aug = 0;
        int sep = 0;
        int oct = 0;
        int nov = 0;
        int dec = 0;
        //loop throught the <reportDates> Arraylist to count the months
        for (Integer m : reportDates){
            if (m == 8) aug++;
            if (m == 9) sep++;
            if (m == 10) oct++;
            if (m == 11) nov++;
            if (m == 12) dec++;
        }
        
        //int[] months = {aug, sep, oct, nov, dec};
        int[] months = {aug, sep, oct};
        
        return months;
    }
}